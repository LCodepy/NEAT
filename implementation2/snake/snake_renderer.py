import math
import pickle
import time

import numpy
import pygame

from implementation2.neat.neural_network import NeuralNetwork
from implementation2.snake.snake import SnakeEngine
from implementation2.rendering.event_handler import EventHandler
from implementation2.rendering.label import Label
from implementation2.utils.functions import softmax


class SnakeRenderer:

    def __init__(self, snake_engine: SnakeEngine, width, height):
        self.width = width
        self.height = height

        self.snake_engine = snake_engine

        self.canvas = pygame.Surface((width, height), pygame.SRCALPHA)

        self.map_size = snake_engine.map_size
        self.tile_size = self.width // self.map_size

        self.dir = (1, 0)

    def update(self, event_handler: EventHandler, inputs: tuple[float, float] | None = None):
        if event_handler.key_just_pressed(pygame.K_SPACE):
            self.snake_engine.reset()
            self.dir = (1, 0)

        if self.snake_engine.game_over:
            self.dir = (1, 0)
            return

        if inputs:
            self.dir = inputs
        else:
            self.update_input_check(event_handler)

    def update_input_check(self, event_handler):
        if event_handler.key_just_pressed(pygame.K_RIGHT):
            self.dir = (1, 0)
        elif event_handler.key_just_pressed(pygame.K_LEFT):
            self.dir = (-1, 0)
        elif event_handler.key_just_pressed(pygame.K_DOWN):
            self.dir = (0, 1)
        elif event_handler.key_just_pressed(pygame.K_UP):
            self.dir = (0, -1)

    def render(self):
        self.canvas.fill((0, 0, 0))

        for i in range(self.map_size):
            for j in range(self.map_size):
                x = i * self.tile_size
                y = j * self.tile_size
                color = (119, 82, 254)
                if j % 2 and i % 2 or not j % 2 and not i % 2:
                    color = (142, 143, 250)
                pygame.draw.rect(self.canvas, color, [x, y, self.tile_size, self.tile_size])

        pygame.draw.rect(self.canvas, (230, 50, 100),
                         [self.snake_engine.apple[0] * self.tile_size, self.snake_engine.apple[1] * self.tile_size, self.tile_size,
                          self.tile_size])

        for part in self.snake_engine.snake:
            pygame.draw.rect(self.canvas, (25, 4, 130),
                             [part[0] * self.tile_size + 5, part[1] * self.tile_size + 5, self.tile_size - 10, self.tile_size - 10])

        Label.render_text(self.canvas, "Score: " + str(self.snake_engine.score), (50, 20),
                          pygame.font.SysFont("arial", 25), (255, 255, 255), bold=True)

        if self.snake_engine.game_over:
            Label.render_text(self.canvas, "Game Over!", (self.width // 2, self.height // 2),
                              pygame.font.SysFont("arial", 40), (255, 255, 255), bold=True)

        return self.canvas


class SnakeGame:

    def __init__(self) -> None:
        pygame.init()

        self.fps = 60

        self.width, self.height = (1000, 1000)

        self.win = pygame.display.set_mode((self.width, self.height), pygame.RESIZABLE | pygame.SRCALPHA)
        self.clock = pygame.time.Clock()
        pygame.display.set_caption("NEAT XOR Renderer")

        self.event_handler = EventHandler()

        self.snake_engine = SnakeEngine()
        self.snake_renderer = SnakeRenderer(self.snake_engine, 1000, 1000)

        self.genome = None

        self.last_frame = 0
        self.paused = False
        self.frame_duration = 2

        self.fitness = 0

        self.running = False

    def run(self) -> None:
        self.running = True

        while self.running:
            self.clock.tick(self.fps)
            pygame.display.update()

            self.update()
            self.render()

            if not self.event_handler.loop():
                self.running = False

    def update(self) -> None:
        if self.genome:
            nn = NeuralNetwork(self.genome)
            outputs = nn.forward(self.get_nn_inputs_v2())
            if len(outputs) == 3:
                self.snake_renderer.update(self.event_handler, self.get_direction((outputs[0], outputs[1], outputs[2])))
            else:
                self.snake_renderer.update(self.event_handler, self.get_direction_v2(outputs))
        else:
            self.snake_renderer.update(self.event_handler)

        if pygame.key.get_pressed()[pygame.K_p]:
            self.paused = not self.paused

        if time.time() - self.last_frame > self.frame_duration and not self.paused:
            prev_apple_dist = abs(self.snake_engine.apple[0] - self.snake_engine.snake[0][0]) + abs(self.snake_engine.apple[1] - self.snake_engine.snake[0][1])
            prev_score = self.snake_engine.score

            self.snake_engine.update(self.snake_renderer.dir)
            self.last_frame = time.time()

            self.print_nn_inputs_v2()

            new_apple_dist = abs(self.snake_engine.apple[0] - self.snake_engine.snake[0][0]) + abs(
                self.snake_engine.apple[1] - self.snake_engine.snake[0][1])

            self.fitness += (prev_apple_dist - new_apple_dist) * 0.1
            if self.snake_engine.score > prev_score:
                self.fitness += 2

            print("\nFrame Fitness:", (prev_apple_dist - new_apple_dist) * 0.1)
            print("Fitness:", self.fitness)

    def render(self) -> None:
        self.snake_renderer.render()

        self.win.blit(self.snake_renderer.canvas, (0, 0))

    def get_nn_inputs(self) -> list[float]:
        DIR_VEC = {
            "U": (0, -1),
            "R": (1, 0),
            "D": (0, 1),
            "L": (-1, 0)
        }

        LEFT = {"U": "L", "L": "D", "D": "R", "R": "U"}
        RIGHT = {v: k for k, v in LEFT.items()}

        hx, hy = self.snake_engine.snake[0]
        ax, ay = self.snake_engine.apple
        body = set(self.snake_engine.snake)
        direction = list(filter(lambda k: DIR_VEC[k] == self.snake_engine.direction, DIR_VEC.keys()))[0]

        dirs = {
            "F": direction,
            "L": LEFT[direction],
            "R": RIGHT[direction]
        }

        # Wall or tail immediately ahead
        obstacles = []
        for key in ("F", "L", "R"):
            dx, dy = DIR_VEC[dirs[key]]
            nx, ny = hx + dx, hy + dy
            obstacles.append(int(self.snake_engine.is_wall(nx, ny) or (nx, ny) in body))

        # Distance to the nearest tail segment
        tail_dists = []
        for key in ("F", "L", "R"):
            dx, dy = DIR_VEC[dirs[key]]
            step, found = 1, 0
            x, y = hx + dx, hy + dy
            while not self.snake_engine.is_wall(x, y):
                if (x, y) in body:
                    found = 1 / step
                    break
                step += 1
                x, y = x + dx, y + dy

            tail_dists.append(found)

        # Apple direction
        food_right = int(ax > hx)
        food_below = int(ay > hy)

        # Current direction
        dir = [int(direction == d) for d in ("U", "R", "D")]

        return [
            obstacles[0], obstacles[1], obstacles[2], tail_dists[0], tail_dists[1], tail_dists[2],
            food_right, food_below, dir[0], dir[1], dir[2]
        ]

    def get_direction(self, outputs: tuple[float, float, float]) -> tuple[int, int]:
        DIR_VEC = {
            "U": (0, -1),
            "R": (1, 0),
            "D": (0, 1),
            "L": (-1, 0)
        }

        LEFT = {"U": "L", "L": "D", "D": "R", "R": "U"}
        RIGHT = {v: k for k, v in LEFT.items()}

        direction = list(filter(lambda k: DIR_VEC[k] == self.snake_engine.direction, DIR_VEC.keys()))[0]

        softmax_outputs = softmax(list(outputs))
        new_dir = self.snake_engine.direction
        if max(softmax_outputs) == softmax_outputs[1]:
            new_dir = DIR_VEC[LEFT[direction]]
        elif max(softmax_outputs) == softmax_outputs[2]:
            new_dir = DIR_VEC[RIGHT[direction]]

        return new_dir

    def get_nn_inputs_v2(self) -> list[float]:
        def look(dx, dy):
            wall_dist = 0
            tail_dist = 0
            apple_dist = 0
            x, y = self.snake_engine.snake[0]
            step = 0

            while 0 <= x < self.snake_engine.map_size and 0 <= y < self.snake_engine.map_size:
                x += dx
                y += dy
                step += 1

                if 0 <= x < self.snake_engine.map_size and 0 <= y < self.snake_engine.map_size:
                    if wall_dist == 0:
                        wall_dist = step
                    if (x, y) in self.snake_engine.snake and tail_dist == 0:
                        tail_dist = step / self.snake_engine.map_size
                    if (x, y) == self.snake_engine.apple and apple_dist == 0:
                        apple_dist = step / self.snake_engine.map_size

            wall_dist = step / self.snake_engine.map_size
            return wall_dist, tail_dist, apple_dist

        wall_dists = []
        tail_dists = []
        apple_dists = []

        for dx, dy in ((1, 0), (-1, 0), (0, -1), (0, 1)):  # Right, Left, Up, Down
            wd, td, ad = look(dx, dy)
            wall_dists.append(wd)
            tail_dists.append(td)
            apple_dists.append(ad)

        apple_right = int(self.snake_engine.apple[0] > self.snake_engine.snake[0][0])
        apple_below = int(self.snake_engine.apple[1] > self.snake_engine.snake[0][1])

        apple_x_dist = abs(self.snake_engine.apple[0] - self.snake_engine.snake[0][0]) / self.snake_engine.map_size
        apple_y_dist = abs(self.snake_engine.apple[1] - self.snake_engine.snake[0][1]) / self.snake_engine.map_size

        return [*wall_dists, *tail_dists, apple_right, apple_below, apple_x_dist, apple_y_dist]

    def get_direction_v2(self, outputs: list[float]) -> tuple[int, int]:
        softmax_outputs = softmax(outputs)

        return [(1, 0), (-1, 0), (0, -1), (0, 1)][numpy.random.choice(4, p=softmax_outputs)]

    def print_nn_inputs(self) -> None:
        inputs = self.get_nn_inputs()

        print("\n---------------------------")
        print("Wall in front: ", inputs[0])
        print("Wall left: ", inputs[1])
        print("Wall right: ", inputs[2])
        print("Tail forward: ", inputs[3])
        print("Tail left: ", inputs[4])
        print("Tail right: ", inputs[5])
        print("Food right? ", inputs[6])
        print("Food below? ", inputs[7])
        print("Up, right, down: ", inputs[8], inputs[9], inputs[10])

    def print_nn_inputs_v2(self) -> None:
        inputs = self.get_nn_inputs_v2()

        print("\n-------------------------")
        print("Wall Right:", inputs[0])
        print("Wall Left:", inputs[1])
        print("Wall Up:", inputs[2])
        print("Wall Down:", inputs[3])
        print("Tail Right:", inputs[4])
        print("Tail Left:", inputs[5])
        print("Tail Up:", inputs[6])
        print("Tail Down:", inputs[7])
        print("Apple Right:", inputs[8])
        print("Apple below:", inputs[9])
        print("Apple X Dist:", inputs[10])
        print("Apple Y Dist:", inputs[11])


if __name__ == "__main__":
    data = b'\x80\x04\x95\x92\x1f\x00\x00\x00\x00\x00\x00\x8c\x1bimplementation2.neat.genome\x94\x8c\x06Genome\x94\x93\x94)\x81\x94}\x94(\x8c\x02id\x94M\xcb#\x8c\nnum_inputs\x94K\x0b\x8c\x0bnum_outputs\x94K\x03\x8c\x12connection_factory\x94\x8c\'implementation2.neat.connection_factory\x94\x8c\x11ConnectionFactory\x94\x93\x94)\x81\x94}\x94(\x8c\x18global_innovation_number\x94M\xa4\x01\x8c\x14generation_mutations\x94]\x94(K\tK\x0fK"\x87\x94K\x0fK\x0cK#\x87\x94K\tK\x10K$\x87\x94K\x10K\rK%\x87\x94K\x03K\x11K&\x87\x94K\x11K\rK\'\x87\x94K\x05K\x12K(\x87\x94K\x12K\x0cK)\x87\x94K\x06K\x13K*\x87\x94K\x13K\x0cK+\x87\x94K\x03K\x14K,\x87\x94K\x14K\x0eK-\x87\x94K\nK\x0eK.\x87\x94K\tK\x0eK/\x87\x94K\nK\x15K0\x87\x94K\x15K\x0eK1\x87\x94K\x0bK\x16K2\x87\x94K\x16K\x0eK3\x87\x94K\x05K\x17K4\x87\x94K\x17K\rK5\x87\x94K\x05K\x18K6\x87\x94K\x18K\x0eK7\x87\x94K\x08K\x0eK8\x87\x94K\x01K\x15K9\x87\x94K\x02K\x15K:\x87\x94K\x0bK\x19K;\x87\x94K\x19K\rK<\x87\x94K\x03K\rK=\x87\x94K\x04K\x15K>\x87\x94K\x08K\x1aK?\x87\x94K\x1aK\x0cK@\x87\x94K\x06K\x1bKA\x87\x94K\x1bK\rKB\x87\x94K\x06K\x18KC\x87\x94K\x01K\x1cKD\x87\x94K\x1cK\x0cKE\x87\x94K\x08K\x15KF\x87\x94K\x02K\x1dKG\x87\x94K\x1dK\x0cKH\x87\x94K\x08K\x1eKI\x87\x94K\x1eK\rKJ\x87\x94K\x01K\x1fKK\x87\x94K\x1fK\x0eKL\x87\x94K\x02K KM\x87\x94K K\rKN\x87\x94K\x08K\rKO\x87\x94K\x15K\rKP\x87\x94K\x03K\x15KQ\x87\x94K\x05K\rKR\x87\x94K\x04K!KS\x87\x94K!K\rKT\x87\x94K\nK"KU\x87\x94K"K\rKV\x87\x94K\nK#KW\x87\x94K#K\x0cKX\x87\x94K\x03K$KY\x87\x94K$K\x0cKZ\x87\x94K\x06K\x15K[\x87\x94K\x07K\rK\\\x87\x94K\x04K\rK]\x87\x94K\x05K\x15K^\x87\x94K\x02K%K_\x87\x94K%K\x0eK`\x87\x94K\x0bK&Ka\x87\x94K&K\x0cKb\x87\x94K\x07K\'Kc\x87\x94K\'K\x0eKd\x87\x94K\x06K(Ke\x87\x94K(K\x0eKf\x87\x94K\x04K)Kg\x87\x94K)K\x0cKh\x87\x94K\x07K\x0cKi\x87\x94K\x06K\x0eKj\x87\x94K\x02K\rKk\x87\x94K\x07K*Kl\x87\x94K*K\x0cKm\x87\x94K\tK+Kn\x87\x94K+K\x0eKo\x87\x94K\x07K,Kp\x87\x94K,K\rKq\x87\x94K\x02K)Kr\x87\x94K\x03K)Ks\x87\x94K\x04K-Kt\x87\x94K-K\x0eKu\x87\x94K)K\x0eKv\x87\x94K*K\rKw\x87\x94K\x04K*Kx\x87\x94K\x0bK)Ky\x87\x94K\x04K\x14Kz\x87\x94K\x04K\x1bK{\x87\x94K\x1bK\x0cK|\x87\x94K\tK\x0cK}\x87\x94K\nK\x1bK~\x87\x94K\x1bK\x0eK\x7f\x87\x94K\x03K\x1bK\x80\x87\x94K\x02K\x1bK\x81\x87\x94K\x02K\x1fK\x82\x87\x94K\x07K\x13K\x83\x87\x94K\x01K\x1bK\x84\x87\x94K\x14K\x0cK\x85\x87\x94K\x04K\x13K\x86\x87\x94K\x07K\x1bK\x87\x87\x94K\x08K.K\x88\x87\x94K.K\x0eK\x89\x87\x94K\x06K\x1fK\x8a\x87\x94K\tK\x14K\x8b\x87\x94K\x08K\x1fK\x8c\x87\x94K\x08K\x1bK\x8d\x87\x94K\x01K\x0eK\x8e\x87\x94K\x04K\x0eK\x8f\x87\x94K\x14K\rK\x90\x87\x94K\x02K\x14K\x91\x87\x94K\x07K\x14K\x92\x87\x94K\x01K/K\x93\x87\x94K/K\rK\x94\x87\x94K\x1fK\rK\x95\x87\x94K\x05K\x1fK\x96\x87\x94K\x07K\x1fK\x97\x87\x94K\tK\x1bK\x98\x87\x94K\x1fK\x0cK\x99\x87\x94K\tK\x1fK\x9a\x87\x94K\x05K\x0cK\x9b\x87\x94K\x02K.K\x9c\x87\x94K\x04K.K\x9d\x87\x94K\x03K\x1fK\x9e\x87\x94K\nK\x1fK\x9f\x87\x94K\x01K\rK\xa0\x87\x94K\x0bK\x1bK\xa1\x87\x94K\x05K\x1bK\xa2\x87\x94K\x01K.K\xa3\x87\x94K\tK.K\xa4\x87\x94K\x04K\x1fK\xa5\x87\x94K+K\rK\xa6\x87\x94K\x0bK.K\xa7\x87\x94K\x07K+K\xa8\x87\x94K\x0bK\x1fK\xa9\x87\x94K+K\x0cK\xaa\x87\x94K\x05K+K\xab\x87\x94K\x06K+K\xac\x87\x94K\x06K"K\xad\x87\x94K\x05K!K\xae\x87\x94K\tK!K\xaf\x87\x94K\x02K+K\xb0\x87\x94K\x01K+K\xb1\x87\x94K\x07K\x0eK\xb2\x87\x94K!K\x0eK\xb3\x87\x94K\x01K\x0fK\xb4\x87\x94K\x04K+K\xb5\x87\x94K\x04K\x0fK\xb6\x87\x94K\x03K\x0fK\xb7\x87\x94K\x07K\x0fK\xb8\x87\x94K+K\x1fK\xb9\x87\x94K\x02K\x0fK\xba\x87\x94K\x08K+K\xbb\x87\x94K\x03K+K\xbc\x87\x94K\nK+K\xbd\x87\x94K\x1fK0K\xbe\x87\x94K0K\x0eK\xbf\x87\x94K\x1fK+K\xc0\x87\x94K\tK1K\xc1\x87\x94K1K\x1fK\xc2\x87\x94K\x06K$K\xc3\x87\x94K+K2K\xc4\x87\x94K2K\x0eK\xc5\x87\x94K\nK%K\xc6\x87\x94K\x0bK%K\xc7\x87\x94K\x07K%K\xc8\x87\x94K\x07K$K\xc9\x87\x94K\x02K\x10K\xca\x87\x94K\x01K$K\xcb\x87\x94K\x01K\x10K\xcc\x87\x94K\x04K%K\xcd\x87\x94K\x0bK+K\xce\x87\x94K\x10K\x0eK\xcf\x87\x94K\x06K\x0cK\xd0\x87\x94K\x04K$K\xd1\x87\x94K\x06K\rK\xd2\x87\x94K\nK\x10K\xd3\x87\x94K\tK$K\xd4\x87\x94K\x0bK$K\xd5\x87\x94K\x05K\x10K\xd6\x87\x94K\x07K\x10K\xd7\x87\x94K$K\x0eK\xd8\x87\x94K\x05K%K\xd9\x87\x94K\x08K\x10K\xda\x87\x94K%K\x0cK\xdb\x87\x94K\x0bK\x10K\xdc\x87\x94K\x06K\x10K\xdd\x87\x94K\x01K%K\xde\x87\x94K\x03K\x10K\xdf\x87\x94K\nK$K\xe0\x87\x94K\x06K%K\xe1\x87\x94K\x10K\x0cK\xe2\x87\x94K\x07K3K\xe3\x87\x94K3K\x1fK\xe4\x87\x94K\x04K\x10K\xe5\x87\x94K$K\rK\xe6\x87\x94K\x0bK3K\xe7\x87\x94K\nK4K\xe8\x87\x94K4K\x1fK\xe9\x87\x94K\nK3K\xea\x87\x94K\tK3K\xeb\x87\x94K\x05K5K\xec\x87\x94K5K\x1fK\xed\x87\x94K\x05K$K\xee\x87\x94K\x02K$K\xef\x87\x94K-K+K\xf0\x87\x94K\x06K-K\xf1\x87\x94K\x02K\x0cK\xf2\x87\x94K\x08K$K\xf3\x87\x94K\x0bK6K\xf4\x87\x94K6K\x1fK\xf5\x87\x94K\x04K\x0cK\xf6\x87\x94K\x02K7K\xf7\x87\x94K7K\x10K\xf8\x87\x94K-K\x1fK\xf9\x87\x94K\x1fK\x1dK\xfa\x87\x94K\x05K\x1dK\xfb\x87\x94K\x01K8K\xfc\x87\x94K8K\x1fK\xfd\x87\x94K+K-K\xfe\x87\x94K-K\x0cK\xff\x87\x94K\x0bK-M\x00\x01\x87\x94K\x07K-M\x01\x01\x87\x94K\tK\rM\x02\x01\x87\x94K\x0bK5M\x03\x01\x87\x94K\x03K5M\x04\x01\x87\x94K\x06K5M\x05\x01\x87\x94K\tK-M\x06\x01\x87\x94K\x05K-M\x07\x01\x87\x94K\nK-M\x08\x01\x87\x94K\x1fK-M\t\x01\x87\x94K\x02K9M\n\x01\x87\x94K9K$M\x0b\x01\x87\x94K*K+M\x0c\x01\x87\x94K\x08K-M\r\x01\x87\x94K\x03K-M\x0e\x01\x87\x94K\x01K9M\x0f\x01\x87\x94K\tK9M\x10\x01\x87\x94K$K:M\x11\x01\x87\x94K:K\x0cM\x12\x01\x87\x94K\nK5M\x13\x01\x87\x94K\x02K\x0eM\x14\x01\x87\x94K\x01K5M\x15\x01\x87\x94K\x1fK*M\x16\x01\x87\x94K\x02K*M\x17\x01\x87\x94K\x01K-M\x18\x01\x87\x94K\x08K*M\x19\x01\x87\x94K-K\rM\x1a\x01\x87\x94K\x01K;M\x1b\x01\x87\x94K;K5M\x1c\x01\x87\x94K\x07K5M\x1d\x01\x87\x94K\x04K5M\x1e\x01\x87\x94K5K\rM\x1f\x01\x87\x94K\tK5M \x01\x87\x94K\x02K!M!\x01\x87\x94K\x0bK!M"\x01\x87\x94K\x03K*M#\x01\x87\x94K\x05K*M$\x01\x87\x94K\x01K*M%\x01\x87\x94K\x02K-M&\x01\x87\x94K\x06K*M\'\x01\x87\x94K\x05K<M(\x01\x87\x94K<K5M)\x01\x87\x94K\x08K!M*\x01\x87\x94K\x03K!M+\x01\x87\x94K\x03K=M,\x01\x87\x94K=K$M-\x01\x87\x94K\nK*M.\x01\x87\x94K\x01K\x0cM/\x01\x87\x94K5K\x0cM0\x01\x87\x94K5K\x0eM1\x01\x87\x94K\x08K5M2\x01\x87\x94K!K-M3\x01\x87\x94K\x01K!M4\x01\x87\x94K*K-M5\x01\x87\x94K\x05K>M6\x01\x87\x94K>K+M7\x01\x87\x94K\x06K.M8\x01\x87\x94K\tK?M9\x01\x87\x94K?K+M:\x01\x87\x94K\x02K5M;\x01\x87\x94K\tK*M<\x01\x87\x94K\x04K@M=\x01\x87\x94K@K-M>\x01\x87\x94K\x1fKAM?\x01\x87\x94KAK\x0cM@\x01\x87\x94K!K\x0cMA\x01\x87\x94K+K*MB\x01\x87\x94K*K\x1fMC\x01\x87\x94K\x1fK MD\x01\x87\x94K K5ME\x01\x87\x94K\x03K MF\x01\x87\x94K\nK\x1dMG\x01\x87\x94K-K*MH\x01\x87\x94K\x0bK MI\x01\x87\x94K\x06K\x1dMJ\x01\x87\x94K\x1dK\rMK\x01\x87\x94K\x1dK\x0eML\x01\x87\x94K*K\x0eMM\x01\x87\x94K\x08K MN\x01\x87\x94K\nK MO\x01\x87\x94K5K\x1dMP\x01\x87\x94K\x07K MQ\x01\x87\x94K\x07KBMR\x01\x87\x94KBK5MS\x01\x87\x94K K\x0eMT\x01\x87\x94K\x03K\x1dMU\x01\x87\x94K\tK\x1dMV\x01\x87\x94K\x01K\x1dMW\x01\x87\x94K\x04K=MX\x01\x87\x94K\x01K MY\x01\x87\x94K K\x0cMZ\x01\x87\x94K\x03KCM[\x01\x87\x94KCK M\\\x01\x87\x94K\x08K\x1dM]\x01\x87\x94K\x07K\x1dM^\x01\x87\x94K\x0bK*M_\x01\x87\x94K\x0bK\x1dM`\x01\x87\x94K\x04K\x1dMa\x01\x87\x94K\x06K Mb\x01\x87\x94K\x04K Mc\x01\x87\x94K\x1bKDMd\x01\x87\x94KDK\rMe\x01\x87\x94K\x05K\x0eMf\x01\x87\x94K\x05KDMg\x01\x87\x94K\tKDMh\x01\x87\x94K\x08KEMi\x01\x87\x94KEK\x1dMj\x01\x87\x94K\x04KFMk\x01\x87\x94KFK5Ml\x01\x87\x94K\x05K Mm\x01\x87\x94K\x08KDMn\x01\x87\x94K\x04KDMo\x01\x87\x94K\x02KGMp\x01\x87\x94KGK\x1fMq\x01\x87\x94K5K Mr\x01\x87\x94K\x02KBMs\x01\x87\x94K\x02KHMt\x01\x87\x94KHK Mu\x01\x87\x94K KIMv\x01\x87\x94KIK\rMw\x01\x87\x94K+KJMx\x01\x87\x94KJK\x0cMy\x01\x87\x94K\tKKMz\x01\x87\x94KKK\x1dM{\x01\x87\x94K\tKJM|\x01\x87\x94K\tK M}\x01\x87\x94K\x13K\x0eM~\x01\x87\x94K\nK\x13M\x7f\x01\x87\x94K\x0bKLM\x80\x01\x87\x94KLK+M\x81\x01\x87\x94K\x04KMM\x82\x01\x87\x94KMK\x1fM\x83\x01\x87\x94K\x13K\rM\x84\x01\x87\x94K\x0bK\x13M\x85\x01\x87\x94K\tK\x13M\x86\x01\x87\x94K\x01K\x1aM\x87\x01\x87\x94K\x02K\x13M\x88\x01\x87\x94K\x1dK5M\x89\x01\x87\x94K\x0bK\x0eM\x8a\x01\x87\x94K\x08KNM\x8b\x01\x87\x94KNK+M\x8c\x01\x87\x94K\x0bKOM\x8d\x01\x87\x94KOK\x13M\x8e\x01\x87\x94K\x08KPM\x8f\x01\x87\x94KPK-M\x90\x01\x87\x94K KQM\x91\x01\x87\x94KQK\x0cM\x92\x01\x87\x94K\x03K\x13M\x93\x01\x87\x94K\x05K\x13M\x94\x01\x87\x94K\x08K\x13M\x95\x01\x87\x94K\x01K\x13M\x96\x01\x87\x94K\x0bK\x0cM\x97\x01\x87\x94K\x0bKRM\x98\x01\x87\x94KRK5M\x99\x01\x87\x94K\x06KSM\x9a\x01\x87\x94KSK5M\x9b\x01\x87\x94K\x01KTM\x9c\x01\x87\x94KTK\x1dM\x9d\x01\x87\x94K\x06KUM\x9e\x01\x87\x94KUK\x13M\x9f\x01\x87\x94K\x13KVM\xa0\x01\x87\x94KVK\x0eM\xa1\x01\x87\x94K\x10K+M\xa2\x01\x87\x94K\x08KWM\xa3\x01\x87\x94KWK M\xa4\x01\x87\x94eub\x8c\x0cnode_factory\x94\x8c!implementation2.neat.node_factory\x94\x8c\x0bNodeFactory\x94\x93\x94)\x81\x94}\x94(h\x0eKWh\x0f]\x94(K\tK\x0cK\x0f\x87\x94K\tK\rK\x10\x87\x94K\x03K\rK\x11\x87\x94K\x05K\x0cK\x12\x87\x94K\x06K\x0cK\x13\x87\x94K\x03K\x0eK\x14\x87\x94K\nK\x0eK\x15\x87\x94K\x0bK\x0eK\x16\x87\x94K\x05K\rK\x17\x87\x94K\x05K\x0eK\x18\x87\x94K\x0bK\rK\x19\x87\x94K\x08K\x0cK\x1a\x87\x94K\x06K\rK\x1b\x87\x94K\x01K\x0cK\x1c\x87\x94K\x02K\x0cK\x1d\x87\x94K\x08K\rK\x1e\x87\x94K\x01K\x0eK\x1f\x87\x94K\x02K\rK \x87\x94K\x04K\rK!\x87\x94K\nK\rK"\x87\x94K\nK\x0cK#\x87\x94K\x03K\x0cK$\x87\x94K\x02K\x0eK%\x87\x94K\x0bK\x0cK&\x87\x94K\x07K\x0eK\'\x87\x94K\x06K\x0eK(\x87\x94K\x04K\x0cK)\x87\x94K\x07K\x0cK*\x87\x94K\tK\x0eK+\x87\x94K\x07K\rK,\x87\x94K\x04K\x0eK-\x87\x94K\x08K\x0eK.\x87\x94K\x01K\rK/\x87\x94K\x1fK\x0eK0\x87\x94K\tK\x1fK1\x87\x94K+K\x0eK2\x87\x94K\x07K\x1fK3\x87\x94K\nK\x1fK4\x87\x94K\x05K\x1fK5\x87\x94K\x0bK\x1fK6\x87\x94K\x02K\x10K7\x87\x94K\x01K\x1fK8\x87\x94K\x02K$K9\x87\x94K$K\x0cK:\x87\x94K\x01K5K;\x87\x94K\x05K5K<\x87\x94K\x03K$K=\x87\x94K\x05K+K>\x87\x94K\tK+K?\x87\x94K\x04K-K@\x87\x94K\x1fK\x0cKA\x87\x94K\x07K5KB\x87\x94K\x03K KC\x87\x94K\x1bK\rKD\x87\x94K\x08K\x1dKE\x87\x94K\x04K5KF\x87\x94K\x02K\x1fKG\x87\x94K\x02K KH\x87\x94K K\rKI\x87\x94K+K\x0cKJ\x87\x94K\tK\x1dKK\x87\x94K\x0bK+KL\x87\x94K\x04K\x1fKM\x87\x94K\x08K+KN\x87\x94K\x0bK\x13KO\x87\x94K\x08K-KP\x87\x94K K\x0cKQ\x87\x94K\x0bK5KR\x87\x94K\x06K5KS\x87\x94K\x01K\x1dKT\x87\x94K\x06K\x13KU\x87\x94K\x13K\x0eKV\x87\x94K\x08K KW\x87\x94eub\x8c\x06config\x94\x8c\x1fimplementation2.neat.neatconfig\x94\x8c\nNEATConfig\x94\x93\x94)\x81\x94}\x94(\x8c\x04name\x94\x8c\x07config1\x94\x8c\x15max_bias_weight_value\x94K\n\x8c\x15min_bias_weight_value\x94J\xf6\xff\xff\xff\x8c\x1dstart_bias_weight_lower_bound\x94J\xff\xff\xff\xff\x8c\x1dstart_bias_weight_upper_bound\x94K\x01\x8c\rgaussian_mean\x94G\x00\x00\x00\x00\x00\x00\x00\x00\x8c\x1bgaussian_standard_deviation\x94G@\x00\x00\x00\x00\x00\x00\x00\x8c\x1dspecies_improvement_threshold\x94G?\x84z\xe1G\xae\x14{\x8c\x13species_target_size\x94K\x08\x8c\x18species_target_step_size\x94G?\xb9\x99\x99\x99\x99\x99\x9a\x8c\x16weight_mutation_chance\x94G?\xe9\x99\x99\x99\x99\x99\x9a\x8c\x1dchange_weight_mutation_chance\x94G?\xec\xcc\xcc\xcc\xcc\xcc\xcd\x8c\x14bias_mutation_chance\x94G?\xe9\x99\x99\x99\x99\x99\x9a\x8c\x1bchange_bias_mutation_chance\x94G?\xec\xcc\xcc\xcc\xcc\xcc\xcd\x8c\x1eadd_connection_mutation_chance\x94G?\xd9\x99\x99\x99\x99\x99\x9a\x8c\x18add_node_mutation_chance\x94G?\xa9\x99\x99\x99\x99\x99\x9a\x8c!remove_connection_mutation_chance\x94G?\xb9\x99\x99\x99\x99\x99\x9a\x8c\x1bremove_node_mutation_chance\x94G?\xa9\x99\x99\x99\x99\x99\x9a\x8c\x16enable_mutation_chance\x94G?\xd0\x00\x00\x00\x00\x00\x00\x8c\x17excess_genes_importance\x94G?\xf0\x00\x00\x00\x00\x00\x00\x8c\x19disjoint_genes_importance\x94G?\xf0\x00\x00\x00\x00\x00\x00\x8c\x1cweight_difference_importance\x94G?\xd9\x99\x99\x99\x99\x99\x9a\x8c\x17compatibility_threshold\x94K\x03\x8c\x12survival_threshold\x94G?\xc9\x99\x99\x99\x99\x99\x9a\x8c&max_allowed_generations_since_improved\x94Kdub\x8c\x10node_input_genes\x94]\x94\x8c\x11node_output_genes\x94]\x94\x8c\nnode_genes\x94}\x94(K\x01\x8c\x19implementation2.neat.node\x94\x8c\x08NodeGene\x94\x93\x94)\x81\x94}\x94(h\x05K\x01\x8c\x04type\x94j\n\x02\x00\x00\x8c\x08NodeType\x94\x93\x94K\x01\x85\x94R\x94\x8c\x04bias\x94K\x00\x8c\nactivation\x94\x8c)implementation2.neat.activation_functions\x94\x8c\x07sigmoid\x94\x93\x94ubK\x02j\x0c\x02\x00\x00)\x81\x94}\x94(h\x05K\x02j\x0f\x02\x00\x00j\x13\x02\x00\x00j\x14\x02\x00\x00K\x00j\x15\x02\x00\x00j\x18\x02\x00\x00ubK\x03j\x0c\x02\x00\x00)\x81\x94}\x94(h\x05K\x03j\x0f\x02\x00\x00j\x13\x02\x00\x00j\x14\x02\x00\x00K\x00j\x15\x02\x00\x00j\x18\x02\x00\x00ubK\x04j\x0c\x02\x00\x00)\x81\x94}\x94(h\x05K\x04j\x0f\x02\x00\x00j\x13\x02\x00\x00j\x14\x02\x00\x00K\x00j\x15\x02\x00\x00j\x18\x02\x00\x00ubK\x05j\x0c\x02\x00\x00)\x81\x94}\x94(h\x05K\x05j\x0f\x02\x00\x00j\x13\x02\x00\x00j\x14\x02\x00\x00K\x00j\x15\x02\x00\x00j\x18\x02\x00\x00ubK\x06j\x0c\x02\x00\x00)\x81\x94}\x94(h\x05K\x06j\x0f\x02\x00\x00j\x13\x02\x00\x00j\x14\x02\x00\x00K\x00j\x15\x02\x00\x00j\x18\x02\x00\x00ubK\x07j\x0c\x02\x00\x00)\x81\x94}\x94(h\x05K\x07j\x0f\x02\x00\x00j\x13\x02\x00\x00j\x14\x02\x00\x00K\x00j\x15\x02\x00\x00j\x18\x02\x00\x00ubK\x08j\x0c\x02\x00\x00)\x81\x94}\x94(h\x05K\x08j\x0f\x02\x00\x00j\x13\x02\x00\x00j\x14\x02\x00\x00K\x00j\x15\x02\x00\x00j\x18\x02\x00\x00ubK\tj\x0c\x02\x00\x00)\x81\x94}\x94(h\x05K\tj\x0f\x02\x00\x00j\x13\x02\x00\x00j\x14\x02\x00\x00K\x00j\x15\x02\x00\x00j\x18\x02\x00\x00ubK\nj\x0c\x02\x00\x00)\x81\x94}\x94(h\x05K\nj\x0f\x02\x00\x00j\x13\x02\x00\x00j\x14\x02\x00\x00K\x00j\x15\x02\x00\x00j\x18\x02\x00\x00ubK\x0bj\x0c\x02\x00\x00)\x81\x94}\x94(h\x05K\x0bj\x0f\x02\x00\x00j\x13\x02\x00\x00j\x14\x02\x00\x00K\x00j\x15\x02\x00\x00j\x18\x02\x00\x00ubK\x0cj\x0c\x02\x00\x00)\x81\x94}\x94(h\x05K\x0cj\x0f\x02\x00\x00j\x11\x02\x00\x00K\x02\x85\x94R\x94j\x14\x02\x00\x00G@\x0f\xe1\xca\xaf\xae\x95\xb5j\x15\x02\x00\x00j\x18\x02\x00\x00ubK\rj\x0c\x02\x00\x00)\x81\x94}\x94(h\x05K\rj\x0f\x02\x00\x00j0\x02\x00\x00j\x14\x02\x00\x00G\xc0\x1b\x06\x95\xe9\xa0\xa3Dj\x15\x02\x00\x00j\x18\x02\x00\x00ubK\x0ej\x0c\x02\x00\x00)\x81\x94}\x94(h\x05K\x0ej\x0f\x02\x00\x00j0\x02\x00\x00j\x14\x02\x00\x00G\xbf\xf3x\xec\xf1vj\x04j\x15\x02\x00\x00j\x18\x02\x00\x00ubK j\x0c\x02\x00\x00)\x81\x94}\x94(h\x05K j\x0f\x02\x00\x00j\x11\x02\x00\x00K\x03\x85\x94R\x94j\x14\x02\x00\x00G@\x03\x05\xa8\xf7r\x8e\x00j\x15\x02\x00\x00j\x18\x02\x00\x00ubu\x8c\x10connection_genes\x94}\x94(K\x00\x8c\x1fimplementation2.neat.connection\x94\x8c\x0eConnectionGene\x94\x93\x94)\x81\x94}\x94(\x8c\ninput_node\x94K\x01\x8c\x0boutput_node\x94K\x0c\x8c\x06weight\x94G\xc0\x1aI\xaf\x89\xec\x1f\xf8\x8c\x07enabled\x94\x88\x8c\x11innovation_number\x94K\x00ubK\x01j=\x02\x00\x00)\x81\x94}\x94(j@\x02\x00\x00K\x01jA\x02\x00\x00K\rjB\x02\x00\x00G?\xf1\x1c\xf3\x06\x08\xb7\x9ejC\x02\x00\x00\x88jD\x02\x00\x00K\x01ubK\x02j=\x02\x00\x00)\x81\x94}\x94(j@\x02\x00\x00K\x01jA\x02\x00\x00K\x0ejB\x02\x00\x00G\xbf\xe8.\x00\x87\xf6\xc9\x9ejC\x02\x00\x00\x89jD\x02\x00\x00K\x02ubK\x03j=\x02\x00\x00)\x81\x94}\x94(j@\x02\x00\x00K\x02jA\x02\x00\x00K\x0cjB\x02\x00\x00G\xc0\n\x96\xdb\xc9\xfd\x0f\xa5jC\x02\x00\x00\x88jD\x02\x00\x00K\x03ubK\x05j=\x02\x00\x00)\x81\x94}\x94(j@\x02\x00\x00K\x02jA\x02\x00\x00K\x0ejB\x02\x00\x00G\xbf\xed\xb8\xb5\xdc6_\xe4jC\x02\x00\x00\x89jD\x02\x00\x00K\x05ubK\x06j=\x02\x00\x00)\x81\x94}\x94(j@\x02\x00\x00K\x03jA\x02\x00\x00K\x0cjB\x02\x00\x00G?\xc3(fy\x95\xaa jC\x02\x00\x00\x89jD\x02\x00\x00K\x06ubK\x07j=\x02\x00\x00)\x81\x94}\x94(j@\x02\x00\x00K\x03jA\x02\x00\x00K\rjB\x02\x00\x00G?\xe7xSE(\x80rjC\x02\x00\x00\x89jD\x02\x00\x00K\x07ubK\x08j=\x02\x00\x00)\x81\x94}\x94(j@\x02\x00\x00K\x03jA\x02\x00\x00K\x0ejB\x02\x00\x00G?\xf1\xd5\xad\xff\xcd\xfe\x06jC\x02\x00\x00\x89jD\x02\x00\x00K\x08ubK\tj=\x02\x00\x00)\x81\x94}\x94(j@\x02\x00\x00K\x04jA\x02\x00\x00K\x0cjB\x02\x00\x00G?\xed\xb34\xb4\x9c\xcf\xd8jC\x02\x00\x00\x89jD\x02\x00\x00K\tubK\x0cj=\x02\x00\x00)\x81\x94}\x94(j@\x02\x00\x00K\x05jA\x02\x00\x00K\x0cjB\x02\x00\x00G\xbf\xf0Ox\x8b\x15\xf9njC\x02\x00\x00\x88jD\x02\x00\x00K\x0cubK\x0ej=\x02\x00\x00)\x81\x94}\x94(j@\x02\x00\x00K\x05jA\x02\x00\x00K\x0ejB\x02\x00\x00G?\xcc\x03\xd8\xc2\x10\x15xjC\x02\x00\x00\x89jD\x02\x00\x00K\x0eubK\x0fj=\x02\x00\x00)\x81\x94}\x94(j@\x02\x00\x00K\x06jA\x02\x00\x00K\x0cjB\x02\x00\x00G\xbf\xf0\x12\x88iC\xaaRjC\x02\x00\x00\x88jD\x02\x00\x00K\x0fubK\x10j=\x02\x00\x00)\x81\x94}\x94(j@\x02\x00\x00K\x06jA\x02\x00\x00K\rjB\x02\x00\x00G?\xd05=\x11\xe0\x01\xb8jC\x02\x00\x00\x88jD\x02\x00\x00K\x10ubK\x11j=\x02\x00\x00)\x81\x94}\x94(j@\x02\x00\x00K\x06jA\x02\x00\x00K\x0ejB\x02\x00\x00G?\xb6J%\xdf\xd0\xe8pjC\x02\x00\x00\x89jD\x02\x00\x00K\x11ubK\x12j=\x02\x00\x00)\x81\x94}\x94(j@\x02\x00\x00K\x07jA\x02\x00\x00K\x0cjB\x02\x00\x00G@\x0cdI\x1f\xeb\xbe\xbdjC\x02\x00\x00\x88jD\x02\x00\x00K\x12ubK\x13j=\x02\x00\x00)\x81\x94}\x94(j@\x02\x00\x00K\x07jA\x02\x00\x00K\rjB\x02\x00\x00G\xbf\xed\xb8\x00\x94\xd2H\xbejC\x02\x00\x00\x89jD\x02\x00\x00K\x13ubK\x14j=\x02\x00\x00)\x81\x94}\x94(j@\x02\x00\x00K\x07jA\x02\x00\x00K\x0ejB\x02\x00\x00G\xbf\xf7\xa0\x91\x00\xc7\xb5\x12jC\x02\x00\x00\x89jD\x02\x00\x00K\x14ubK\x15j=\x02\x00\x00)\x81\x94}\x94(j@\x02\x00\x00K\x08jA\x02\x00\x00K\x0cjB\x02\x00\x00G?\xe6.\xc9TS\x888jC\x02\x00\x00\x88jD\x02\x00\x00K\x15ubK\x16j=\x02\x00\x00)\x81\x94}\x94(j@\x02\x00\x00K\x08jA\x02\x00\x00K\rjB\x02\x00\x00G?\xcc\xd0l\xa9\x9f\xacLjC\x02\x00\x00\x88jD\x02\x00\x00K\x16ubK\x17j=\x02\x00\x00)\x81\x94}\x94(j@\x02\x00\x00K\x08jA\x02\x00\x00K\x0ejB\x02\x00\x00G@\x04^Mr\xfe\x89\xecjC\x02\x00\x00\x89jD\x02\x00\x00K\x17ubK\x18j=\x02\x00\x00)\x81\x94}\x94(j@\x02\x00\x00K\tjA\x02\x00\x00K\x0cjB\x02\x00\x00G@\x011\xff,i\xd1hjC\x02\x00\x00\x89jD\x02\x00\x00K\x18ubK\x19j=\x02\x00\x00)\x81\x94}\x94(j@\x02\x00\x00K\tjA\x02\x00\x00K\rjB\x02\x00\x00G?\xe8E\xcf\x99\xdd\xd7ZjC\x02\x00\x00\x89jD\x02\x00\x00K\x19ubK\x1bj=\x02\x00\x00)\x81\x94}\x94(j@\x02\x00\x00K\njA\x02\x00\x00K\x0cjB\x02\x00\x00G?\xf2\xabm\xc8\x08l\xc7jC\x02\x00\x00\x89jD\x02\x00\x00K\x1bubK\x1cj=\x02\x00\x00)\x81\x94}\x94(j@\x02\x00\x00K\njA\x02\x00\x00K\rjB\x02\x00\x00G?\xdcl`Y\x0e\r\x1cjC\x02\x00\x00\x89jD\x02\x00\x00K\x1cubK\x1dj=\x02\x00\x00)\x81\x94}\x94(j@\x02\x00\x00K\njA\x02\x00\x00K\x0ejB\x02\x00\x00G@\x0e\x9d\x03\xd7\xcc\xbe\xefjC\x02\x00\x00\x88jD\x02\x00\x00K\x1dubK\x1fj=\x02\x00\x00)\x81\x94}\x94(j@\x02\x00\x00K\x0bjA\x02\x00\x00K\rjB\x02\x00\x00G\xbf\xe9I\xea\xbc\x83\xaenjC\x02\x00\x00\x88jD\x02\x00\x00K\x1fubK j=\x02\x00\x00)\x81\x94}\x94(j@\x02\x00\x00K\x0bjA\x02\x00\x00K\x0ejB\x02\x00\x00G?\xe1\x1aJ"\xee\'njC\x02\x00\x00\x89jD\x02\x00\x00K ubKkj=\x02\x00\x00)\x81\x94}\x94(j@\x02\x00\x00K\x02jA\x02\x00\x00K\rjB\x02\x00\x00G?\xf7\x8ep\xba\xa9=\x01jC\x02\x00\x00\x89jD\x02\x00\x00KkubK\x8fj=\x02\x00\x00)\x81\x94}\x94(j@\x02\x00\x00K\x04jA\x02\x00\x00K\x0ejB\x02\x00\x00G?\xea\xc91&\x04\x8a\xf8jC\x02\x00\x00\x88jD\x02\x00\x00K\x8fubKRj=\x02\x00\x00)\x81\x94}\x94(j@\x02\x00\x00K\x05jA\x02\x00\x00K\rjB\x02\x00\x00G\xbf\xf9\xd9\x88\xbb\xce\xe2\xedjC\x02\x00\x00\x88jD\x02\x00\x00KRubK/j=\x02\x00\x00)\x81\x94}\x94(j@\x02\x00\x00K\tjA\x02\x00\x00K\x0ejB\x02\x00\x00G\xbf\xf8\x99q\x9at\x13\xfajC\x02\x00\x00\x88jD\x02\x00\x00K/ubM\x97\x01j=\x02\x00\x00)\x81\x94}\x94(j@\x02\x00\x00K\x0bjA\x02\x00\x00K\x0cjB\x02\x00\x00G\xbf\xbe\xa1\x19y\x13S\xd0jC\x02\x00\x00\x88jD\x02\x00\x00M\x97\x01ubKMj=\x02\x00\x00)\x81\x94}\x94(j@\x02\x00\x00K\x02jA\x02\x00\x00K jB\x02\x00\x00G?\xf0\x00\x00\x00\x00\x00\x00jC\x02\x00\x00\x88jD\x02\x00\x00KMubKNj=\x02\x00\x00)\x81\x94}\x94(j@\x02\x00\x00K jA\x02\x00\x00K\rjB\x02\x00\x00G?\xf7\x8ep\xba\xa9=\x01jC\x02\x00\x00\x88jD\x02\x00\x00KNubMI\x01j=\x02\x00\x00)\x81\x94}\x94(j@\x02\x00\x00K\x0bjA\x02\x00\x00K jB\x02\x00\x00G?\xef\x93!\xc9\xfdO\xc8jC\x02\x00\x00\x88jD\x02\x00\x00MI\x01ubuub.'

    genome = pickle.loads(data)

    snake_game = SnakeGame()
    snake_game.genome = genome
    snake_game.frame_duration = 0.1
    snake_game.run()
